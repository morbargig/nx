pipeline {
    agent none

    environment{
        SOURCE_CREDENTIALS = '299c107b-2af6-4a96-9a3e-c22b065831b3'
        SOURCE_URL = 'https://dev.azure.com/Fnxp1/Agents/_git/mono-repo'
        MODULE_NAME= "package"
        project="agents"
        VERSION="1.0.0"
        APPLICATION_AFFECTED=['main-app','api']
    }
    options {
        ansiColor('xterm')
        timeout(time: 1, unit: 'HOURS')
        //lock resource: currentBuild.rawBuild.project.parent.displayName
    }
    stages {
        stage('run on eaasboxt02'){
            agent { node { label 'eaasboxt02'} }
            stages {
                stage('clean'){
                    steps{
                        deleteDir()
                        echo ("deleteDir")
                    }
                }
                stage('get sources'){
                    steps{
                    checkout([$class: 'GitSCM', branches: [[name: env.BRANCH_NAME ]], browser: [$class: 'TFS2013GitRepositoryBrowser', repoUrl: SOURCE_URL], doGenerateSubmoduleConfigurations: false, extensions: [], gitTool: 'Git', submoduleCfg: [], userRemoteConfigs: [[credentialsId: '299c107b-2af6-4a96-9a3e-c22b065831b3', url: SOURCE_URL]]])
                    script{
                            println("pulling branch: "+env.BRANCH_NAME)
                        }
                    }
                }

                stage('check if agent-package exists'){
                    steps{
                        script{
                            print("TODO: check if agent-package exists in artifactory")
                        }
                    }
                }

                stage('build and push image'){
                    steps{
                        script{
                            string artifactory_path = "artifactory:5000/${env.project}/${env.MODULE_NAME}"

                            sh("docker build -f Dockerfile --no-cache --tag ${artifactory_path} .")
                            sh("docker push ${artifactory_path}")
                            sh("docker rmi ${artifactory_path}")
                        }
                    }
                }

                stage ('trigger build job') {
                    steps{
                        script{
                            for(application in APPLICATION_AFFECTED){
                                build job: "${env.project}_${application}", wait: false
                            }
                        }
                    }
                }
            }
        }
    }
}
