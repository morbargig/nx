pipeline {
    agent none

    environment{
        SOURCE_CREDENTIALS = '299c107b-2af6-4a96-9a3e-c22b065831b3'
        SOURCE_URL = 'https://dev.azure.com/Fnxp1/Agents/_git/mono-repo'
        SOURCE_URL_SCRIPT = 'https://dev.azure.com/fnxp1/DevOps/_git/scripts'
        MODULE_NAME= "main-app"
        TGTDIR= "gitops/Dev/integ/main-app"
        project="agents"
        VERSION="1.0.0"
    }
    options {
        ansiColor('xterm')
        timeout(time: 1, unit: 'HOURS')
        lock resource: currentBuild.rawBuild.project.parent.displayName
    }
    stages {
        stage('run on eaasboxt02'){
            agent { node { label 'eaasboxt02'} }
            stages {
                stage('clean'){
                    steps{
                        deleteDir()
                        echo ("deleteDir")
                    }
                }
                stage('get sources'){
                    steps{
                    checkout([$class: 'GitSCM', branches: [[name: env.BRANCH_NAME ]], browser: [$class: 'TFS2013GitRepositoryBrowser', repoUrl: SOURCE_URL], doGenerateSubmoduleConfigurations: false, extensions: [], gitTool: 'Git', submoduleCfg: [], userRemoteConfigs: [[credentialsId: SOURCE_CREDENTIALS, url: SOURCE_URL]]])
                    script{
                            println("pulling branch: "+env.BRANCH_NAME)
                        }
                    }
                }

                stage('build and push image'){
                    steps{
                        script{
                            date_timestamp = new Date().format("yyyyMMdd_'T'HHmmss")
                            string featureBranch = env.BRANCH_NAME
                            string featureBranch = featureBranch.replaceAll("/","-")
                            string image_version = "${featureBranch}.${VERSION}.${BUILD_NUMBER}"
                            string temp_artifactory_path = "artifactory:5000/${env.project}/${env.MODULE_NAME}:${image_version}"

                            //Build Dockerfile of application:
                            //================================
                            sh("docker build -f apps/${MODULE_NAME}/Dockerfile --no-cache --tag ${temp_artifactory_path} .")
                            sh("docker push ${temp_artifactory_path}")


                            sha_and_version = sh(script:"docker images --digests | grep ${env.project}/${env.MODULE_NAME} | head -1 |awk '{print \$2 \",\" \$3 }'", returnStdout: true).trim()

                            def (app_version, app_sha) = sha_and_version.split(',')

                            println("app_version: " + app_version)
                            artifact_name = app_version
                            println("image_version: " + image_version)


                            sh("docker rmi ${temp_artifactory_path}")

                            sh("echo ${VERSION}.${BUILD_NUMBER}")

                            //print the image version:
                            println('#'*42+' Image Version: '+'#'*42)
                            println('#'*17+' '+image_version+' '+'#'*17)
                            println('#'*100)

                            withCredentials([string(credentialsId: 'tfsbuilder_token', variable: 'tfsbuilder')]) {
                                sh("git remote add ${MODULE_NAME}-pushable https://tfsbuilder:'${tfsbuilder}'@dev.azure.com/fnxp1/${project}/_git/mono-repo")

                                sh("""git tag -a ${image_version}-${date_timestamp} -m "jenkins version" && git push ${MODULE_NAME}-pushable --tags ${image_version}-${date_timestamp}""")
                            }
                        }
                    }
                }

                stage ('Updating gitops repo for Dev') {
                    steps{
                        script{
                            if (env.BRANCH_NAME == 'develop') {
                                withCredentials([string(credentialsId: 'tfsbuilder_token', variable: 'tfsbuilder')]) {
                                    sh("git clone https://tfsbuilder:${tfsbuilder}@dev.azure.com/fnxp1/${project}/_git/gitops")


                                    println(image_version)
                                    sh("sed -i 's#${MODULE_NAME}:.*#${MODULE_NAME}:${image_version}#g' '${TGTDIR}'/image-version.yaml")

                                    sh("cd gitops && git add Dev/integ/${MODULE_NAME}/image-version.yaml && git commit -m 'updating gitops ${MODULE_NAME} from ci pipeline version: ${image_version}' && git push")

                                    // TODO: check this command it's more clear
                                    sh("""${curl} -X PUT "https://artifactory.hq.corp.phoenix.co.il:8443/artifactory/api/storage/docker-local/${env.project}/${MODULE_NAME}/${artifact_name}"?properties=devops_tags=${image_version} --fail""")
                                }
                            }
                        }
                    }
                }
            }
        }
    }
    post {
        always {
            node('eaasboxt02'){
                script{
                    COMMITER_EMAIL = sh(
                        script: "git --no-pager show -s --format=\'%ae\'",
                        returnStdout: true
                    ).trim()
                    println("Git committer email: ${COMMITER_EMAIL}")
                }
            }
        }
        failure {
            emailext body: '''${SCRIPT, template="groovy_html.template"}''',
                     mimeType: 'text/html',
                     subject: "${JOB_NAME}",
                     to: "morb4@fnx.co.il, ${COMMITER_EMAIL}"
        }
        success {
            emailext body: '''${SCRIPT, template="groovy_html.template"}''',
                     mimeType: 'text/html',
                     subject: "${JOB_NAME}",
                     to: "morb4@fnx.co.il, ${COMMITER_EMAIL}"
        }
    }
}
